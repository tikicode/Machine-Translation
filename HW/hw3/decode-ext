#!/usr/bin/env python3

import optparse
import sys
import os
import models
from collections import namedtuple

class BeamSearch:
    def __init__(self, opts):
        self.tm = models.TM(opts.tm, opts.k)
        self.lm = models.LM(opts.lm)
        self.f = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]


    def decode(self):
        for word in set(sum(self.f, ())):
            if (word,) not in self.tm:
                self.tm[(word,)] = [models.phrase(word, 0.0)]
        sys.stderr.write(f"Decoding with Beam Search {opts.input}...\n")
        for f in french:
            hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase")
            source_french = self.get_source_phrase()
    
    def get_french_phrases(self):
        phrases = {}
        for i in range(len(self.f)):
            for j in range(i + 1, len(self.f)):
                if self.f[i:j] in self.tm:
                    if i in phrases:
                        phrases[i].append(j)
                    else:
                        phrases[i] = [j]
       return sorted 



optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxsize, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=1, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=1, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,  help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]


# tm should translate unknown words as-is with probability 1
for word in set(sum(french,())):
  if (word,) not in tm:
    tm[(word,)] = [models.phrase(word, 0.0)]

sys.stderr.write("Decoding %s...\n" % (opts.input,))


def extract_english(h): 
  return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)





